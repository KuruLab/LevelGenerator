/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import evoGraph.ConfigManager;
import com.bulenkov.darcula.DarculaLaf;
import evoGraph.Config;
import evoGraph.Decoder;
import evoGraph.Evaluation;
import evoGraph.EvoJSONFileReader;
import evoGraph.EvoJSONFileWriter;
import evoGraph.GraphImageBuilder;
import evoGraph.GraphIndividual;
import evoGraph.RefinementOperator;
import extendedMetaZelda.Condition;
import extendedMetaZelda.DungeonGenerator;
import extendedMetaZelda.DungeonUtil;
import graphstream.GraphStreamUtil;
import extendedMetaZelda.Symbol;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.plaf.basic.BasicLookAndFeel;
import org.graphstream.algorithm.generator.BarabasiAlbertGenerator;
import org.graphstream.graph.Edge;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.DefaultGraph;
import org.graphstream.ui.geom.Point3;
import static org.graphstream.ui.graphicGraph.GraphPosLengthUtils.edgeLength;
import static org.graphstream.ui.graphicGraph.GraphPosLengthUtils.nodePointPosition;
import org.graphstream.ui.swingViewer.ViewPanel;
import org.graphstream.ui.view.Viewer;

/**
 *
 * @author andre
 */
public class Main extends javax.swing.JFrame {
    
    protected Graph graph;
    protected GAThread gaThread;
    /**
     * Creates new form GraphLoaderTest
     */
    public Main() {
        initComponents();
        initCombo(nodeBox);
        initCombo(edgeBox);
        graph = new DefaultGraph("graph");
        //resetGraph();
        JTextField[][] popStatistics = {{popSizeMin,    popSizeMean,    popSizeMedian},
                                        {popFitnessMin, popFitnessMean, popFitnessMedian},
                                        {popNIPMin,     popNIPMean,     popNIPMedian},
                                        {popEIPMin,     popEIPMean,     popEIPMedian},
                                        {popSPMin,      popSPMean,      popSPMedian},
                                        {popMEDPMin,    popMEDPMean,    popMEDPMedian},
                                        {popASPMin,     popASPMean,     popASPMedian},
                                        {popUASMin,     popUASMean,     popUASMedian},
                                        {popDINMin,     popDINMean,     popDINMedian}};
        gaThread = new GAThread(graph,
                runGeneticAlgorithm, progress, graphPanel,
                nodeBox, edgeBox,
                size, fitness, nip, eip, sp, medp, asp, uas, gen, din,
                popStatistics);
    }
    
    public void initCombo(JComboBox combo){
        combo.removeAllItems();
        combo.updateUI();
    }
    
    // transfered to GAThread class
    /*public void setupNodeCombo(){
        nodeBox.removeAllItems();
        if(graph != null){
            for(Node node : graph.getEachNode()){
                nodeBox.addItem(node.getId());
            }
        }
        nodeBox.updateUI();
    }
    
    public void setupEdgeCombo(){
        edgeBox.removeAllItems();
        if(graph != null){
            for(Edge edge : graph.getEachEdge()){
                edgeBox.addItem(edge.getId());
            }
        }
        edgeBox.updateUI();
    }*/
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        folder = new javax.swing.JTextField();
        loadJsonMap = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        borderSize = new javax.swing.JTextField();
        edgeSize = new javax.swing.JTextField();
        minNodeCount = new javax.swing.JTextField();
        minNodeSize = new javax.swing.JTextField();
        minEdgeDist = new javax.swing.JTextField();
        deltaFactor = new javax.swing.JTextField();
        maxNodeCount = new javax.swing.JTextField();
        maxNodeSize = new javax.swing.JTextField();
        maxEdgeDist = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        linksPerStep = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        crossoverRate = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        mutationRate = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        refinementRate = new javax.swing.JTextField();
        xLeap = new javax.swing.JTextField();
        yLeap = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        zLeap = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        population = new javax.swing.JTextField();
        generation = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        nodeInterserctionPenalty = new javax.swing.JTextField();
        edgeIntersectionPenalty = new javax.swing.JTextField();
        nodeCountPenalty = new javax.swing.JTextField();
        minEdgeDistPenalty = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        preferedAngles = new javax.swing.JTextField();
        useAngles = new javax.swing.JCheckBox();
        useASP = new javax.swing.JCheckBox();
        maximizeNodeCount = new javax.swing.JCheckBox();
        useINL = new javax.swing.JCheckBox();
        jLabel62 = new javax.swing.JLabel();
        idealNonlinearity = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        configFile = new javax.swing.JTextField();
        saveConfig = new javax.swing.JButton();
        loadConfig = new javax.swing.JButton();
        applyConfig = new javax.swing.JButton();
        resetConfig = new javax.swing.JButton();
        saveJasonMap = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        nodeBox = new javax.swing.JComboBox<>();
        jLabel29 = new javax.swing.JLabel();
        nodeX = new javax.swing.JTextField();
        nodeY = new javax.swing.JTextField();
        nodeZ = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        nodeWidth = new javax.swing.JTextField();
        nodeHeight = new javax.swing.JTextField();
        nodeDepth = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        nodeIntensity = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        nodeSymbol = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        nodeDegree = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel34 = new javax.swing.JLabel();
        edgeBox = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        edgeFrom = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        edgeTo = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        edgeSymbol = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        edgeDistance = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        edgeAngle = new javax.swing.JTextField();
        nodeApply = new javax.swing.JButton();
        addNode = new javax.swing.JButton();
        removeNode = new javax.swing.JButton();
        addEdge = new javax.swing.JButton();
        edgeApply = new javax.swing.JButton();
        removeEdge = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        runGeneticAlgorithm = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        stop = new javax.swing.JButton();
        evaluate = new javax.swing.JButton();
        refine = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        nip = new javax.swing.JTextField();
        size = new javax.swing.JTextField();
        fitness = new javax.swing.JTextField();
        asp = new javax.swing.JTextField();
        eip = new javax.swing.JTextField();
        uas = new javax.swing.JTextField();
        sp = new javax.swing.JTextField();
        medp = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        gen = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        din = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        popSizeMin = new javax.swing.JTextField();
        popSizeMedian = new javax.swing.JTextField();
        popSizeMean = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        popFitnessMin = new javax.swing.JTextField();
        popFitnessMean = new javax.swing.JTextField();
        popFitnessMedian = new javax.swing.JTextField();
        popNIPMean = new javax.swing.JTextField();
        popNIPMin = new javax.swing.JTextField();
        popNIPMedian = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        popEIPMin = new javax.swing.JTextField();
        popEIPMean = new javax.swing.JTextField();
        popEIPMedian = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        popSPMedian = new javax.swing.JTextField();
        popSPMean = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        popSPMin = new javax.swing.JTextField();
        popMEDPMin = new javax.swing.JTextField();
        popMEDPMean = new javax.swing.JTextField();
        popMEDPMedian = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        popASPMin = new javax.swing.JTextField();
        popASPMean = new javax.swing.JTextField();
        popASPMedian = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        popUASMean = new javax.swing.JTextField();
        popUASMin = new javax.swing.JTextField();
        popUASMedian = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        popDINMin = new javax.swing.JTextField();
        popDINMean = new javax.swing.JTextField();
        popDINMedian = new javax.swing.JTextField();
        loopRefinement = new javax.swing.JCheckBox();
        jLabel40 = new javax.swing.JLabel();
        fileName = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        graphPanel = new javax.swing.JPanel();
        dungeonize = new javax.swing.JButton();
        viewMap = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scale-free Evolutionary Level Generartor");

        jLabel1.setText("Folder:");

        folder.setText("./data/gui_maps/1618875503/");

        loadJsonMap.setText("Load");
        loadJsonMap.setToolTipText("Load graph from json file in 'data' folder.");
        loadJsonMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadJsonMapActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph Properties"));

        jLabel2.setText("Border Size:");

        jLabel3.setText("Edge Size:");

        jLabel4.setText("Min / Max Node Count:");

        jLabel5.setText("/");

        jLabel6.setText("Min / Max Edge Dist.:");

        jLabel7.setText("/");

        jLabel8.setText("Min / Max Node Size:");

        jLabel9.setText("/");

        jLabel10.setText("Delta Factor:");

        borderSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        borderSize.setText("5");

        edgeSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        edgeSize.setText("6");

        minNodeCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minNodeCount.setText("25");

        minNodeSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minNodeSize.setText("6");

        minEdgeDist.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minEdgeDist.setText("5");

        deltaFactor.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        deltaFactor.setText("4.0");

        maxNodeCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxNodeCount.setText("50");

        maxNodeSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxNodeSize.setText("10");

        maxEdgeDist.setEditable(false);
        maxEdgeDist.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxEdgeDist.setText("-");
        maxEdgeDist.setEnabled(false);

        jLabel27.setText("Max Links per Step:");

        linksPerStep.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        linksPerStep.setText("1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(borderSize, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edgeSize, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minNodeCount, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minNodeSize, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minEdgeDist, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxNodeCount, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxNodeSize, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxEdgeDist, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deltaFactor, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                            .addComponent(linksPerStep))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borderSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edgeSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(minNodeCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxNodeCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel9)
                        .addComponent(maxNodeSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(minNodeSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(minEdgeDist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxEdgeDist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deltaFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(linksPerStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Evolutionary Parameters"));

        jLabel11.setText("Crossover Rate:");

        crossoverRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        crossoverRate.setText("0.9");

        jLabel12.setText("Mutation Rate:");

        mutationRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        mutationRate.setText("0.1");

        jLabel13.setText("Refinement Rate:");

        refinementRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        refinementRate.setText("0.025");

        xLeap.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        xLeap.setText("1.25");

        yLeap.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        yLeap.setText("1.25");

        jLabel14.setText("Max Leap At");

        zLeap.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        zLeap.setText("0");
        zLeap.setEnabled(false);

        jLabel15.setText("Population:");

        jLabel16.setText("Generation:");

        jLabel22.setText("X:");

        jLabel23.setText("Y:");

        jLabel24.setText("Z:");

        population.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        population.setText("100");

        generation.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        generation.setText("200");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(crossoverRate, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mutationRate, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refinementRate, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(population, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(generation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(xLeap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yLeap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zLeap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(crossoverRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mutationRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(xLeap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refinementRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(yLeap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zLeap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(population, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(0, 0, 0))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Evaluation Parameters"));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Penalty Methods"));

        nodeInterserctionPenalty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeInterserctionPenalty.setText("100");

        edgeIntersectionPenalty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        edgeIntersectionPenalty.setText("1000");

        nodeCountPenalty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeCountPenalty.setText("1000");

        minEdgeDistPenalty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minEdgeDistPenalty.setText("1000");

        jLabel17.setText("Node Intersection:");

        jLabel18.setText("Edge Intersection:");

        jLabel19.setText("Node Count:");

        jLabel20.setText("Min. Edge Dist.:");

        jLabel21.setText("Factors");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nodeInterserctionPenalty)
                    .addComponent(edgeIntersectionPenalty)
                    .addComponent(nodeCountPenalty)
                    .addComponent(minEdgeDistPenalty)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel21)
                .addGap(4, 4, 4)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nodeInterserctionPenalty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(4, 4, 4)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edgeIntersectionPenalty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(4, 4, 4)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeCountPenalty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(4, 4, 4)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minEdgeDistPenalty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel17.getAccessibleContext().setAccessibleName("");
        jLabel18.getAccessibleContext().setAccessibleName("");
        jLabel19.getAccessibleContext().setAccessibleName("");
        jLabel20.getAccessibleContext().setAccessibleName("");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Design Preferences"));

        jLabel25.setText("Pref. Angles:");

        preferedAngles.setText("0; 90; 180;");

        useAngles.setSelected(true);
        useAngles.setText("Use Angles");

        useASP.setSelected(true);
        useASP.setText("Use ASP");

        maximizeNodeCount.setText("Maximize Node Count");

        useINL.setText("Use Nonlinearity");

        jLabel62.setText("Ideal Nonlinearity:");

        idealNonlinearity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        idealNonlinearity.setText("3");
        idealNonlinearity.setToolTipText("Ideal value for the nonlinearity metric.");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(useAngles)
                    .addComponent(maximizeNodeCount)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(useINL)
                            .addComponent(useASP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel62)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(idealNonlinearity))))
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(preferedAngles)
                        .addContainerGap())
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useAngles)
                    .addComponent(jLabel25))
                .addGap(4, 4, 4)
                .addComponent(preferedAngles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useASP)
                    .addComponent(jLabel62))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useINL)
                    .addComponent(idealNonlinearity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maximizeNodeCount)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(4, 4, 4))
        );

        jLabel26.setText("Config:");

        configFile.setText("./data/gui_maps/1618875503/config_1618875503.json");

        saveConfig.setText("Save");
        saveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigActionPerformed(evt);
            }
        });

        loadConfig.setText("Load");
        loadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadConfigActionPerformed(evt);
            }
        });

        applyConfig.setText("Apply");
        applyConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyConfigActionPerformed(evt);
            }
        });

        resetConfig.setText("Reset");
        resetConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel26)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(configFile, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(saveConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetConfig)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(configFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveConfig)
                    .addComponent(loadConfig)
                    .addComponent(applyConfig)
                    .addComponent(resetConfig))
                .addGap(4, 4, 4)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        jScrollPane1.setViewportView(jPanel3);

        saveJasonMap.setText("Save");
        saveJasonMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJasonMapActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph Information"));

        jLabel28.setText("Nodes:");

        nodeBox.setToolTipText("List of all nodes in the graph.");
        nodeBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nodeBoxItemStateChanged(evt);
            }
        });

        jLabel29.setText("Position:");

        nodeX.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeX.setText("0");
        nodeX.setToolTipText("X");

        nodeY.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeY.setText("0");
        nodeY.setToolTipText("Y");

        nodeZ.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeZ.setText("0");
        nodeZ.setToolTipText("Z");

        jLabel30.setText("Size:");

        nodeWidth.setEditable(false);
        nodeWidth.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeWidth.setText("0");
        nodeWidth.setToolTipText("Width (X Size)");

        nodeHeight.setEditable(false);
        nodeHeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeHeight.setText("0");
        nodeHeight.setToolTipText("Height (Y Size)");

        nodeDepth.setEditable(false);
        nodeDepth.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeDepth.setText("0");
        nodeDepth.setToolTipText("Depth (Z Size)");

        jLabel31.setText("Intensity:");

        nodeIntensity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeIntensity.setText("0");
        nodeIntensity.setToolTipText("Double value between 0.0 and 1.0.");

        jLabel32.setText("Symbol:");

        nodeSymbol.setEditable(false);
        nodeSymbol.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeSymbol.setText("0");
        nodeSymbol.setToolTipText("A label used to categorize and map the level key elements.");

        jLabel33.setText("Degree:");

        nodeDegree.setEditable(false);
        nodeDegree.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodeDegree.setText("0");
        nodeDegree.setToolTipText("Number of connected edges.");

        jLabel34.setText("Edges:");

        edgeBox.setToolTipText("List with all edges in the graph.");
        edgeBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                edgeBoxItemStateChanged(evt);
            }
        });

        jLabel35.setText("From:");

        edgeFrom.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        edgeFrom.setText("0");
        edgeFrom.setToolTipText("Node ID of the first node.");

        jLabel36.setText("To:");

        edgeTo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        edgeTo.setText("0");
        edgeTo.setToolTipText("Node ID of the second node.");

        jLabel37.setText("Symbol:");

        edgeSymbol.setEditable(false);
        edgeSymbol.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        edgeSymbol.setText("0");
        edgeSymbol.setToolTipText("A label used to categorize and map the level key elements.");

        jLabel38.setText("Distance:");

        edgeDistance.setEditable(false);
        edgeDistance.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        edgeDistance.setText("0");
        edgeDistance.setToolTipText("Euclidian distance between the nodes.");

        jLabel39.setText("Angle:");

        edgeAngle.setEditable(false);
        edgeAngle.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        edgeAngle.setText("0");
        edgeAngle.setToolTipText("Rotation of the edge, in degrees.");

        nodeApply.setText("Apply");
        nodeApply.setToolTipText("Apply changes to the selected node.");
        nodeApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeApplyActionPerformed(evt);
            }
        });

        addNode.setText("+");
        addNode.setToolTipText("Create a new node. It will be placed at (0.0, 0.0, 0.0).");
        addNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNodeActionPerformed(evt);
            }
        });

        removeNode.setText("-");
        removeNode.setToolTipText("Remove the selected node.");
        removeNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeNodeActionPerformed(evt);
            }
        });

        addEdge.setText("+");
        addEdge.setToolTipText("Add a new edge.");
        addEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEdgeActionPerformed(evt);
            }
        });

        edgeApply.setText("Apply");
        edgeApply.setToolTipText("Apply changes to the selected edge.");
        edgeApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeApplyActionPerformed(evt);
            }
        });

        removeEdge.setText("-");
        removeEdge.setToolTipText("Remove the selected edge.");
        removeEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEdgeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                    .addComponent(nodeSymbol)
                                    .addComponent(nodeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(nodeWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nodeHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nodeDepth, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(nodeX, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nodeY, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nodeZ, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel33, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nodeIntensity)
                                    .addComponent(nodeDegree)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addComponent(addNode)
                                .addGap(4, 4, 4)
                                .addComponent(removeNode)
                                .addGap(4, 4, 4)
                                .addComponent(nodeApply)))
                        .addGap(4, 4, 4))))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addEdge)
                        .addGap(4, 4, 4)
                        .addComponent(removeEdge)
                        .addGap(4, 4, 4)
                        .addComponent(edgeApply))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(edgeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(edgeFrom)
                                    .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(edgeTo, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                    .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addComponent(edgeSymbol, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(edgeDistance)
                            .addComponent(jLabel39, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(edgeAngle))))
                .addGap(4, 4, 4))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29)
                    .addComponent(jLabel31))
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33))
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeDepth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeDegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeApply)
                    .addComponent(addNode)
                    .addComponent(removeNode))
                .addGap(6, 6, 6)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(jLabel35)
                    .addComponent(jLabel36)
                    .addComponent(jLabel38))
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edgeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edgeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edgeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edgeDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(jLabel39))
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edgeSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edgeAngle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addEdge)
                    .addComponent(edgeApply)
                    .addComponent(removeEdge))
                .addGap(4, 4, 4))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Genetic Algorithm: Best Individual"));

        runGeneticAlgorithm.setText("Run");
        runGeneticAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runGeneticAlgorithmActionPerformed(evt);
            }
        });

        jLabel41.setText("Progress:");

        progress.setToolTipText("");
        progress.setStringPainted(true);

        stop.setText("Stop");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        evaluate.setText("Evaluate");
        evaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateActionPerformed(evt);
            }
        });

        refine.setText("Refine");
        refine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refineActionPerformed(evt);
            }
        });

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Best Individual"));

        jLabel44.setText("ASP:");

        jLabel45.setText("Size:");

        jLabel46.setText("UAS:");

        jLabel47.setText("EIP:");

        jLabel42.setText("NIP:");

        jLabel48.setText("SP:");

        jLabel43.setText("Fitness");

        jLabel49.setText("MEDP:");

        nip.setEditable(false);
        nip.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nip.setText("0");
        nip.setToolTipText("Node Area Intersection Penalty");

        size.setEditable(false);
        size.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        size.setText("0");
        size.setToolTipText("Size, the number of nodes.");

        fitness.setEditable(false);
        fitness.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fitness.setText("0");
        fitness.setToolTipText("Total fitness value.");

        asp.setEditable(false);
        asp.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        asp.setText("0");
        asp.setToolTipText("All-Pairs Average Shortest Path");

        eip.setEditable(false);
        eip.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        eip.setText("0");
        eip.setToolTipText("Edge Area Intersection Penalty.");

        uas.setEditable(false);
        uas.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        uas.setText("0");
        uas.setToolTipText("Undesired Angle Sum");

        sp.setEditable(false);
        sp.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sp.setText("0");
        sp.setToolTipText("Size Out of Bounds Penalty");

        medp.setEditable(false);
        medp.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        medp.setText("0");
        medp.setToolTipText("Mininum Edge Distance Penalty.");

        jLabel50.setText("Gen:");

        gen.setEditable(false);
        gen.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gen.setText("0");
        gen.setToolTipText("Undesired Angle Sum");

        jLabel63.setText("DIN:");

        din.setEditable(false);
        din.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        din.setText("0");
        din.setToolTipText("Undesired Angle Sum");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel49, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel47, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                        .addGap(2, 2, 2)))
                .addGap(4, 4, 4)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(sp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eip, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nip, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fitness, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(asp, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel45)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel63, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel46, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel50, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uas, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(gen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                .addComponent(din, javax.swing.GroupLayout.Alignment.LEADING)))))
                .addGap(1, 1, 1))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(fitness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45)
                    .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(nip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44)
                    .addComponent(asp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46)
                    .addComponent(jLabel47)
                    .addComponent(uas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48)
                    .addComponent(jLabel63)
                    .addComponent(din, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49)
                    .addComponent(jLabel50)
                    .addComponent(gen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Population"));

        popSizeMin.setEditable(false);
        popSizeMin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popSizeMin.setText("0");
        popSizeMin.setToolTipText("");

        popSizeMedian.setEditable(false);
        popSizeMedian.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popSizeMedian.setText("0");
        popSizeMedian.setToolTipText("");

        popSizeMean.setEditable(false);
        popSizeMean.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popSizeMean.setText("0");
        popSizeMean.setToolTipText("");

        jLabel54.setText("Size:");

        jLabel55.setText("Fitness:");

        popFitnessMin.setEditable(false);
        popFitnessMin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popFitnessMin.setText("0");
        popFitnessMin.setToolTipText("");

        popFitnessMean.setEditable(false);
        popFitnessMean.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popFitnessMean.setText("0");
        popFitnessMean.setToolTipText("");

        popFitnessMedian.setEditable(false);
        popFitnessMedian.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popFitnessMedian.setText("0");
        popFitnessMedian.setToolTipText("");

        popNIPMean.setEditable(false);
        popNIPMean.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popNIPMean.setText("0");
        popNIPMean.setToolTipText("");

        popNIPMin.setEditable(false);
        popNIPMin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popNIPMin.setText("0");
        popNIPMin.setToolTipText("");

        popNIPMedian.setEditable(false);
        popNIPMedian.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popNIPMedian.setText("0");
        popNIPMedian.setToolTipText("");

        jLabel56.setText("NIP:");

        popEIPMin.setEditable(false);
        popEIPMin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popEIPMin.setText("0");
        popEIPMin.setToolTipText("");

        popEIPMean.setEditable(false);
        popEIPMean.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popEIPMean.setText("0");
        popEIPMean.setToolTipText("");

        popEIPMedian.setEditable(false);
        popEIPMedian.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popEIPMedian.setText("0");
        popEIPMedian.setToolTipText("");

        jLabel57.setText("EIP:");

        popSPMedian.setEditable(false);
        popSPMedian.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popSPMedian.setText("0");
        popSPMedian.setToolTipText("");

        popSPMean.setEditable(false);
        popSPMean.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popSPMean.setText("0");
        popSPMean.setToolTipText("");

        jLabel58.setText("SP:");

        popSPMin.setEditable(false);
        popSPMin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popSPMin.setText("0");
        popSPMin.setToolTipText("");

        popMEDPMin.setEditable(false);
        popMEDPMin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popMEDPMin.setText("0");
        popMEDPMin.setToolTipText("");

        popMEDPMean.setEditable(false);
        popMEDPMean.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popMEDPMean.setText("0");
        popMEDPMean.setToolTipText("");

        popMEDPMedian.setEditable(false);
        popMEDPMedian.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popMEDPMedian.setText("0");
        popMEDPMedian.setToolTipText("");

        jLabel59.setText("MEDP:");

        popASPMin.setEditable(false);
        popASPMin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popASPMin.setText("0");
        popASPMin.setToolTipText("");

        popASPMean.setEditable(false);
        popASPMean.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popASPMean.setText("0");
        popASPMean.setToolTipText("");

        popASPMedian.setEditable(false);
        popASPMedian.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popASPMedian.setText("0");
        popASPMedian.setToolTipText("");

        jLabel60.setText("ASP:");

        jLabel61.setText("UAS:");

        popUASMean.setEditable(false);
        popUASMean.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popUASMean.setText("0");
        popUASMean.setToolTipText("");

        popUASMin.setEditable(false);
        popUASMin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popUASMin.setText("0");
        popUASMin.setToolTipText("");

        popUASMedian.setEditable(false);
        popUASMedian.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popUASMedian.setText("0");
        popUASMedian.setToolTipText("");

        jLabel51.setText("Min");

        jLabel52.setText("Mean");

        jLabel53.setText("Median");

        jLabel64.setText("DIN");

        popDINMin.setEditable(false);
        popDINMin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popDINMin.setText("0");
        popDINMin.setToolTipText("");

        popDINMean.setEditable(false);
        popDINMean.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popDINMean.setText("0");
        popDINMean.setToolTipText("");

        popDINMedian.setEditable(false);
        popDINMedian.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popDINMedian.setText("0");
        popDINMedian.setToolTipText("");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel51, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(popSizeMin, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel52, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(popSizeMean, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel53, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(popSizeMedian, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4))))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popFitnessMin, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popFitnessMean, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popFitnessMedian, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popNIPMin, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popNIPMean, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popNIPMedian, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popEIPMin, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popEIPMean, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popEIPMedian, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popSPMin, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popSPMean, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popSPMedian, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popMEDPMin, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popMEDPMean, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popMEDPMedian, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popASPMin, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popASPMean, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popASPMedian, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popUASMin, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popUASMean, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popUASMedian, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel64, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popDINMin, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popDINMean, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popDINMedian, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(jLabel52)
                    .addComponent(jLabel53))
                .addGap(4, 4, 4)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popSizeMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popSizeMedian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popSizeMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel54))
                .addGap(4, 4, 4)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popFitnessMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popFitnessMedian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popFitnessMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel55))
                .addGap(4, 4, 4)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popNIPMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popNIPMedian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popNIPMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel56))
                .addGap(4, 4, 4)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popEIPMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popEIPMedian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popEIPMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel57))
                .addGap(4, 4, 4)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popSPMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popSPMedian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popSPMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel58))
                .addGap(4, 4, 4)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popMEDPMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popMEDPMedian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popMEDPMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel59))
                .addGap(4, 4, 4)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popASPMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popASPMedian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popASPMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel60))
                .addGap(4, 4, 4)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popUASMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popUASMedian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popUASMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel61))
                .addGap(4, 4, 4)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popDINMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popDINMedian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popDINMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel64))
                .addGap(0, 0, 0))
        );

        loopRefinement.setText("Loop");
        loopRefinement.setToolTipText("Will iteratively loop the refinement until no improvement can be found. If selected, this proccess may take while. Otherwise, it will just perform a single refinement process.");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(runGeneticAlgorithm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stop)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loopRefinement)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refine)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(evaluate)))
                        .addContainerGap())))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runGeneticAlgorithm)
                    .addComponent(stop)
                    .addComponent(evaluate)
                    .addComponent(refine)
                    .addComponent(loopRefinement))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jScrollPane2.setViewportView(jPanel7);

        jLabel40.setText("File Name:");

        fileName.setText("1618875503");

        graphPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph"));
        graphPanel.setLayout(new java.awt.BorderLayout());
        jScrollPane3.setViewportView(graphPanel);

        dungeonize.setText("Dungeonize");
        dungeonize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dungeonizeActionPerformed(evt);
            }
        });

        viewMap.setText("View Map");
        viewMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(folder))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileName))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 896, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadJsonMap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveJasonMap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewMap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dungeonize)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(folder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadJsonMap)
                    .addComponent(saveJasonMap)
                    .addComponent(jLabel40)
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dungeonize)
                    .addComponent(viewMap))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadJsonMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadJsonMapActionPerformed
        String pathStr = folder.getText();
        if(!pathStr.endsWith("/"))
            pathStr += "/";
        String name = "map_"+fileName.getText()+".json";
        EvoJSONFileReader reader = new EvoJSONFileReader(pathStr+name);
        this.graph = reader.parseJson();
        //this.gaThread.setGraph(graph);
        graph.addAttribute("ui.screenshot", pathStr+"\\screenshot_"+fileName.getText()+".png");
        //(new GraphStreamUtil()).randomSpanningTree(graph, new Random());
        buildGraph();
    }//GEN-LAST:event_loadJsonMapActionPerformed
    
    protected void resetGraph(){
        if(graph != null){
            DungeonUtil dUtil = new DungeonUtil();
            dUtil.initializeGraphIntensity(graph);
            dUtil.initializeGraphSymbols(graph);
            dUtil.initializeGraphConditions(graph);
            //dUtil.computeDepthBasedIntensity(graph);
        }
    }
    
    protected void buildGraph(){
        if(graph != null){
            GraphStreamUtil gUtil = new GraphStreamUtil();
            gUtil.normalizeNodesSizes(graph, Config.minNodeSize, Config.maxNodeSize);
            gUtil.setupStyle((DefaultGraph) graph);

            refreshGraphView();
        }
    }
    
    private void saveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigActionPerformed
        try{    
            String pathStr = configFile.getText();
            String folderStr = folder.getText();
            Integer borderS = Integer.parseInt(borderSize.getText());
            Double edgeS = Double.parseDouble(edgeSize.getText());
            Integer minNC = Integer.parseInt(minNodeCount.getText());
            Integer maxNC = Integer.parseInt(maxNodeCount.getText());
            Double minNS = Double.parseDouble(minNodeSize.getText());
            Double maxNS = Double.parseDouble(maxNodeSize.getText());
            Double minED = Double.parseDouble(minEdgeDist.getText());
            Double bFactor = Double.parseDouble(deltaFactor.getText());
            Integer links = Integer.parseInt(linksPerStep.getText());
            Integer nip = Integer.parseInt(nodeInterserctionPenalty.getText());
            Integer eip = Integer.parseInt(edgeIntersectionPenalty.getText());
            Integer ncp = Integer.parseInt(nodeCountPenalty.getText());
            Integer edp = Integer.parseInt(minEdgeDistPenalty.getText());
            Double crxP = Double.parseDouble(crossoverRate.getText());
            Double mutP = Double.parseDouble(mutationRate.getText());
            Double refP = Double.parseDouble(refinementRate.getText());
            Double xL = Double.parseDouble(xLeap.getText());
            Double yL = Double.parseDouble(yLeap.getText());
            Double zL = Double.parseDouble(zLeap.getText());
            Integer pop = Integer.parseInt(population.getText());
            Integer gen = Integer.parseInt(generation.getText());
            Boolean useDA = useAngles.isSelected();
            Boolean useAvgSP = useASP.isSelected();
            Boolean useiNL = useINL.isSelected();
            Boolean useMNC = maximizeNodeCount.isSelected();
            int[] angles = parseAngles(preferedAngles.getText());
            Integer iNL = Integer.parseInt(idealNonlinearity.getText());
            ConfigManager cm = new ConfigManager();
            cm.saveConfig(pathStr,
                folderStr,
                borderS, edgeS,
                minNC, maxNC, minNS, maxNS,
                minED, bFactor, links,
                nip, eip, ncp, edp,
                crxP, mutP, refP,
                xL, yL, zL,
                pop, gen,
                useDA, useAvgSP, useMNC, useiNL,
                angles, iNL);
        }catch(java.lang.NumberFormatException exp){
            JOptionPane.showMessageDialog(this, "Number Format Exception:\nPlease, check the format of each parameter.\n(try 'Reset' if the error continues)","Error",JOptionPane.ERROR_MESSAGE);
        }    
    }//GEN-LAST:event_saveConfigActionPerformed

    private void applyConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyConfigActionPerformed
        try{
            Config.folder = folder.getText().replace("/", File.separator).replace("\\", File.separator);
            Config.borderSize = Integer.parseInt(borderSize.getText());
            Config.edgeSize = Double.parseDouble(edgeSize.getText());
            Config.minNodeCount = Integer.parseInt(minNodeCount.getText());
            Config.maxNodeCount = Integer.parseInt(maxNodeCount.getText());
            Config.minNodeSize = Double.parseDouble(minNodeSize.getText());
            Config.maxNodeSize = Double.parseDouble(maxNodeSize.getText());
            Config.minEdgeDistance = Double.parseDouble(minEdgeDist.getText());
            Config.barabasiFactor = Double.parseDouble(deltaFactor.getText());
            Config.maxLinksPerStep = Integer.parseInt(linksPerStep.getText());
            Config.areaIntersectionPenalty = Integer.parseInt(nodeInterserctionPenalty.getText());
            Config.edgeIntersectionPenalty = Integer.parseInt(edgeIntersectionPenalty.getText());
            Config.nodeCountPenalty = Integer.parseInt(nodeCountPenalty.getText());
            Config.edgeDistancePentalty = Integer.parseInt(minEdgeDistPenalty.getText());
            Config.crossoverProb = Double.parseDouble(crossoverRate.getText());
            Config.mutationProb = Double.parseDouble(mutationRate.getText());
            Config.refinementProb = Double.parseDouble(refinementRate.getText());
            Config.nodeXLeap = Double.parseDouble(xLeap.getText());
            Config.nodeYLeap = Double.parseDouble(yLeap.getText());
            Config.nodeZLeap = Double.parseDouble(zLeap.getText());
            Config.popSize = Integer.parseInt(population.getText());
            Config.maxGen = Integer.parseInt(generation.getText());
            Config.useDesiredAngles = useAngles.isSelected();
            Config.useAverageShortestPath = useASP.isSelected();
            Config.useMaximizeNodeCount = maximizeNodeCount.isSelected();
            Config.useIdealNonLinearity = useINL.isSelected();
            Config.desiredAngles = parseAngles(preferedAngles.getText());
            Config.idealNonLinearity = Integer.parseInt(idealNonlinearity.getText());
        }
        catch(java.lang.NumberFormatException exp){
            JOptionPane.showMessageDialog(this, "Number Format Exception:\nPlease, check the format of each parameter.\n(try 'Reset' if the error continues)","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_applyConfigActionPerformed

    private void resetConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetConfigActionPerformed
        folder.setText(Config.folder.replace("/", File.separator).replace("\\", File.separator));
        
        borderSize.setText(     String.format("%s",   Config.borderSize));
        edgeSize.setText(       String.format("%.1f", Config.edgeSize));
        minNodeCount.setText(   String.format("%s",   Config.minNodeCount));
        maxNodeCount.setText(   String.format("%s",   Config.maxNodeCount));
        minNodeSize.setText(    String.format("%.1f", Config.minNodeSize));
        maxNodeSize.setText(    String.format("%.1f", Config.maxNodeSize));
        minEdgeDist.setText(    String.format("%.1f", Config.minEdgeDistance));
        deltaFactor.setText(    String.format("%.1f", Config.barabasiFactor));
        linksPerStep.setText(    String.format("%s",  Config.maxLinksPerStep));
        nodeInterserctionPenalty.setText(   String.format("%s", Config.areaIntersectionPenalty));
        edgeIntersectionPenalty.setText(    String.format("%s", Config.edgeIntersectionPenalty));
        nodeCountPenalty.setText(           String.format("%s", Config.nodeCountPenalty));
        minEdgeDistPenalty.setText(         String.format("%s", Config.edgeDistancePentalty));
        
        crossoverRate.setText(  String.format("%.3f", Config.crossoverProb));
        mutationRate.setText(   String.format("%.3f", Config.mutationProb));
        refinementRate.setText( String.format("%.3f", Config.refinementProb));
        
        xLeap.setText(String.format("%.3f", Config.nodeXLeap));
        yLeap.setText(String.format("%.3f", Config.nodeYLeap));
        zLeap.setText(String.format("%.3f", Config.nodeZLeap));
        
        population.setText(         String.format("%s", Config.popSize));
        generation.setText(         String.format("%s", Config.maxGen));
        
        useAngles.setSelected(Config.useDesiredAngles);
        useASP.setSelected(Config.useAverageShortestPath);
        maximizeNodeCount.setSelected(Config.useMaximizeNodeCount);
        useINL.setSelected(Config.useIdealNonLinearity);
        
        preferedAngles.setText(Arrays.toString(Config.desiredAngles).replace(",", ";").replace("[", "").replace("]", ""));
        idealNonlinearity.setText(String.format("%s",   Config.idealNonLinearity));
    }//GEN-LAST:event_resetConfigActionPerformed

    private void loadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadConfigActionPerformed
        String configPath = configFile.getText();
        ConfigManager cm = new ConfigManager();
        cm.loadConfig(configPath);
        
        resetConfigActionPerformed(evt);
    }//GEN-LAST:event_loadConfigActionPerformed

    private void nodeBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nodeBoxItemStateChanged
        if(!runGeneticAlgorithm.isEnabled())
            this.graph = gaThread.getGraph();
        String item = (String) nodeBox.getSelectedItem();
        if(item != null){
            String nodeID = gaThread.getNodeID(Integer.parseInt(item));
            Node node = graph.getNode(nodeID);
            if(node != null){
                Point3 p = nodePointPosition(node);
                nodeX.setText(String.format("%s", (int)p.x));
                nodeY.setText(String.format("%s", (int)p.y));
                nodeZ.setText(String.format("%s", (int)p.z));
                nodeWidth.setText(String.format("%s", (int)(double) node.getAttribute("width")));
                nodeHeight.setText(String.format("%s", (int)(double) node.getAttribute("height")));
                nodeDepth.setText(String.format("%s", 0));
                if(node.getAttribute("ui.color") == null){
                    nodeIntensity.setText(String.format("%.2f", 0.0));
                    node.setAttribute("ui.color", 0.0);
                }
                else
                    nodeIntensity.setText(String.format("%.2f", (double) node.getAttribute("ui.color")));
                nodeDegree.setText(String.format("%s", (int) node.getDegree()));
                if(node.hasAttribute("symbol"))
                    nodeSymbol.setText(String.format("%s", (Symbol) node.getAttribute("symbol")));
                else
                    nodeSymbol.setText("");
            }
            else{
                System.err.println("Graph has "+graph.getNodeCount()+" nodes.\nNode is null.\nitem: "+item+" nodeID: "+nodeID);
            }
        }
        else{
            //System.err.println("item is null");
        }
    }//GEN-LAST:event_nodeBoxItemStateChanged

    private void edgeBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_edgeBoxItemStateChanged
        if(!runGeneticAlgorithm.isEnabled())
            this.graph = gaThread.getGraph();
        
        String item = (String) edgeBox.getSelectedItem();
        if(item != null){
            String[] index = item.split("_");
            String edgeID = gaThread.getNodeID(Integer.parseInt(index[0]))+"_"+gaThread.getNodeID(Integer.parseInt(index[1]));
            Edge edge = graph.getEdge(edgeID);
            if(edge != null){
                edgeFrom.setText(String.format("%s", gaThread.getIndex(edge.getNode0().getId())));
                edgeTo.setText(String.format("%s", gaThread.getIndex(edge.getNode1().getId())));
                Evaluation eva = new Evaluation();
                edgeAngle.setText(String.format("%.1fº", eva.angleInDegrees(edge)));
                edgeDistance.setText(String.format("%.2f", edgeLength(edge)));
                if(edge.hasAttribute("symbol"))
                    edgeSymbol.setText(String.format("%s", (Symbol) edge.getAttribute("symbol")));
                else
                    edgeSymbol.setText("");
            }
            else{
                System.err.println("Graph has "+graph.getNodeCount()+" nodes.\nEdge is null.\nitem: "+item+" edgeID: "+edgeID);
            }
        }
    }//GEN-LAST:event_edgeBoxItemStateChanged

    private void nodeApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeApplyActionPerformed
        String item = (String) nodeBox.getSelectedItem();
        if(item != null){
            Node node = graph.getNode(item);
            if(node != null){
                try{
                    int x = Integer.parseInt(nodeX.getText());
                    int y = Integer.parseInt(nodeY.getText());
                    int z = Integer.parseInt(nodeZ.getText());
                    graph.getNode(item).setAttribute("xyz", x, y, z);
                    double intensity = Double.parseDouble(nodeIntensity.getText());
                    graph.getNode(item).setAttribute("ui.color", intensity);
                } catch(java.lang.NumberFormatException exp){
                    JOptionPane.showMessageDialog(this, "Number Format Exception:\nPlease, check the format of each parameter.","Error",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        buildGraph();
    }//GEN-LAST:event_nodeApplyActionPerformed

    private void saveJasonMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJasonMapActionPerformed
        String folderPath = folder.getText();
        String name = fileName.getText();
        File dir = new File(folderPath);
        if(!dir.exists()){
            dir.mkdir();
        }
        
        int maxX = 0;
        int maxY = 0;
        for(Node node : graph.getEachNode()){
            Point3 p = nodePointPosition(node);
            //System.out.println(node.getId()+": "+p.toString());
            maxX = (int) Math.max(maxX, p.x + ((double) node.getAttribute("width")/2));
            maxY = (int) Math.max(maxY, p.y + ((double) node.getAttribute("height")/2));
        }
        EvoJSONFileWriter fw = new EvoJSONFileWriter(graph);
        System.out.println("Exporting Map\n"+
                dir+"\\data_"+name+".json"+"\n"+
                dir+"\\map_"+name+".json");
        fw.exportDataJSON(dir+"\\data_"+name+".json",
                "GraphStream", maxX, maxY, true);
        fw.exportMapJSON(dir+"\\map_"+name+".json",
                "Evolutionary"+BarabasiAlbertGenerator.class.getSimpleName(), true);
        
        // export PNG
        GraphImageBuilder gib = new GraphImageBuilder(dir+"\\img_"+name+".png");
        gib.buildImage(graph);
        
        graph.addAttribute("ui.screenshot", dir+"\\screenshot_"+name+".png");
        buildGraph();
    }//GEN-LAST:event_saveJasonMapActionPerformed

    private void edgeApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeApplyActionPerformed
        String item = (String) edgeBox.getSelectedItem();
        if(item != null){
            Edge edge = graph.getEdge(item);
            if(edge != null){
                try{
                    String fromIndex = edgeFrom.getText();
                    String toIndex = edgeTo.getText();
                    
                    Node from = graph.getNode(gaThread.getNodeID(Integer.parseInt(fromIndex)));
                    if(from == null){
                        JOptionPane.showMessageDialog(this, "This node doesn't exist:\nPlease, check the node 'From' parameter and make sure there is a node with the respective ID.","Error!",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    Node to = graph.getNode(gaThread.getNodeID(Integer.parseInt(toIndex)));
                    if(to == null){
                        JOptionPane.showMessageDialog(this, "This node doesn't exist:\nPlease, check the node 'To' parameter and make sure there is a node with the respective ID.","Error!",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if(graph.getEdge(fromIndex+"_"+toIndex) != null || graph.getEdge(toIndex+"_"+fromIndex) != null){
                        JOptionPane.showMessageDialog(this, "This edge alread exist:\nPlease, check the edge parameters.\nYou can't add two edges to the same pair of nodes.","Attention!",JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    graph.removeEdge(edge);
                    graph.addEdge(fromIndex+"_"+toIndex, from, to);
                    
                } catch(java.lang.NumberFormatException exp){
                    JOptionPane.showMessageDialog(this, "Number Format Exception:\nPlease, check the format of each parameter.","Error",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        buildGraph();
    }//GEN-LAST:event_edgeApplyActionPerformed

    private void addNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNodeActionPerformed
        if(graph == null){
            graph = new DefaultGraph("new");
            refreshGraphView();
        }
        int id = findValidID();
        gaThread.mapNodeID2Index(graph);
        String nodeID = String.format("%s", id);
        graph.addNode(nodeID);
        graph.getNode(nodeID).addAttribute("ui.label", nodeID);
        graph.getNode(nodeID).addAttribute("xyz", 0, 0, 0);
        graph.getNode(nodeID).addAttribute("width",  Config.maxNodeSize);
        graph.getNode(nodeID).addAttribute("height", Config.maxNodeSize);
        graph.getNode(nodeID).addAttribute("symbol", new Symbol(Symbol.NOTHING));
        graph.getNode(nodeID).addAttribute("condition", new Condition(new Symbol(0)));
        graph.getNode(nodeID).addAttribute("ui.style", " size: "+Config.maxNodeSize+";");
        graph.getNode(nodeID).addAttribute("ui.color", 0.0);
        graph.getNode(nodeID).addAttribute("ui.class", "standard");
        
        refreshGraphView();
    }//GEN-LAST:event_addNodeActionPerformed

    private void removeNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeNodeActionPerformed
        String item = (String) nodeBox.getSelectedItem();
        if(item != null){
            String nodeID = gaThread.getNodeID(Integer.parseInt(item));
            Node node = graph.getNode(nodeID);
            if(node != null){
                graph.removeNode(node);
            }
        }
        
        refreshGraphView();
    }//GEN-LAST:event_removeNodeActionPerformed

    private void addEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEdgeActionPerformed
        try{
            String fromIndex = edgeFrom.getText();
            String toIndex = edgeTo.getText();
            
            Node from = graph.getNode(gaThread.getNodeID(Integer.parseInt(fromIndex)));
            if(from == null){
                JOptionPane.showMessageDialog(this, "This node doesn't exist:\nPlease, check the node 'From' parameter and make sure there is a node with the respective ID.","Error!",JOptionPane.ERROR_MESSAGE);
                return;
            }
            Node to = graph.getNode(gaThread.getNodeID(Integer.parseInt(toIndex)));
            if(to == null){
                JOptionPane.showMessageDialog(this, "This node doesn't exist:\nPlease, check the node 'To' parameter and make sure there is a node with the respective ID.","Error!",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(graph.getEdge(fromIndex+"_"+toIndex) != null || graph.getEdge(toIndex+"_"+fromIndex) != null){
                JOptionPane.showMessageDialog(this, "This edge alread exists:\nPlease, check the edge parameters.\nYou can't add two edges to the same pair of nodes.","Attention!",JOptionPane.WARNING_MESSAGE);
                return;
            }
            graph.addEdge(fromIndex+"_"+toIndex, from, to);
            
            refreshGraphView();
        } catch(java.lang.NumberFormatException exp){
            JOptionPane.showMessageDialog(this, "Number Format Exception:\nPlease, check the format of each parameter.","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addEdgeActionPerformed

    private void removeEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEdgeActionPerformed
        String item = (String) edgeBox.getSelectedItem();
        if(item != null){
            String[] index = item.split("_");
            String edgeID = gaThread.getNodeID(Integer.parseInt(index[0]))+"_"+gaThread.getNodeID(Integer.parseInt(index[1]));
            Edge edge = graph.getEdge(edgeID);
            if(edge != null){
                graph.removeEdge(edge);
                
                buildGraph();
            }
        }
    }//GEN-LAST:event_removeEdgeActionPerformed

    private void refineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refineActionPerformed
        refine.setEnabled(false);
        
        RefinementOperator ref = new RefinementOperator();
        Decoder encoder = new Decoder(graph);
        GraphIndividual individual = encoder.encode();
        Decoder barabasiDecoder = new Decoder(individual);
        GraphIndividual connectedIndividual = barabasiDecoder.barabasiAlbertGraph();

        Evaluation evaluator = new Evaluation();
        double[] candidate = evaluator.detailedFitness(connectedIndividual, true);
        double[] best;
        do{
            best = candidate;
            connectedIndividual = ref.geoRefinement(connectedIndividual, true);
            connectedIndividual = ref.exaustiveRefinement(connectedIndividual, true);
            candidate = evaluator.detailedFitness(connectedIndividual, true);
            
            Decoder graphDecoder = new Decoder(connectedIndividual);
            graph = graphDecoder.decode();
            DungeonGenerator dgg = new DungeonGenerator(graph);
            dgg.generate();
            //resetGraph();
            buildGraph();
            evaluateActionPerformed(evt);
        } while(checkImprovementConditions(candidate, best) && loopRefinement.isSelected());
        
        refine.setEnabled(true);
    }//GEN-LAST:event_refineActionPerformed
    
    private boolean checkImprovementConditions(double[] candidate, double[] currentBest){
        if(candidate[1] < currentBest[1]){
            return true;
        }
        else{
            if(Config.useMaximizeNodeCount && candidate[1] == currentBest[1]){
                if(candidate[0] > currentBest[0])
                    return true;
            }
        } 
        return false;
    }
    
    private void evaluateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateActionPerformed
        Evaluation evaluator = new Evaluation();
        /*Decoder encoder = new Decoder(graph);
        Individual individual = encoder.encode();
        Decoder barabadiDecoder = new Decoder(individual);
        Individual connectedIndividual = barabadiDecoder.barabasiAlbertGraph();*/
        double[] detailedFitness = evaluator.detailedFitness(graph, true);
        size.setText(String.format("%s", (int)detailedFitness[0]));
        fitness.setText(String.format("%.4f", detailedFitness[1]));
        nip.setText(String.format("%.4f", detailedFitness[2]));
        eip.setText(String.format("%.4f", detailedFitness[3]));
        sp.setText(String.format("%.4f", detailedFitness[4]));
        medp.setText(String.format("%.4f", detailedFitness[5]));
        asp.setText(String.format("%.4f", detailedFitness[6]));
        uas.setText(String.format("%.4f", detailedFitness[7]));
        din.setText(String.format("%s", detailedFitness[8]));
    }//GEN-LAST:event_evaluateActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        graph = gaThread.getGraph();
        gaThread.setStop(true);
        buildGraph();
    }//GEN-LAST:event_stopActionPerformed

    private void runGeneticAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runGeneticAlgorithmActionPerformed
        runGeneticAlgorithm.setEnabled(false);
        applyConfigActionPerformed(evt);
         JTextField[][] popStatistics = {{popSizeMin,    popSizeMean,    popSizeMedian},
                                        {popFitnessMin, popFitnessMean, popFitnessMedian},
                                        {popNIPMin,     popNIPMean,     popNIPMedian},
                                        {popEIPMin,     popEIPMean,     popEIPMedian},
                                        {popSPMin,      popSPMean,      popSPMedian},
                                        {popMEDPMin,    popMEDPMean,    popMEDPMedian},
                                        {popASPMin,     popASPMean,     popASPMedian},
                                        {popUASMin,     popUASMean,     popUASMedian},
                                        {popDINMin,     popDINMean,     popDINMedian}};
        gaThread = new GAThread(graph,
                runGeneticAlgorithm, progress, graphPanel,
                nodeBox, edgeBox,
                size, fitness, nip, eip, sp, medp, asp, uas, gen, din,
                popStatistics);
        SwingWorker worker = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                Thread thread = new Thread(gaThread);
                thread.start();

                return null;
            }
        };
        worker.run();
    }//GEN-LAST:event_runGeneticAlgorithmActionPerformed

    private void dungeonizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dungeonizeActionPerformed
        if(graph != null){
            resetGraph();
            DungeonGenerator dgg = new DungeonGenerator(graph);
            dgg.generate(true);
            buildGraph();
        }
    }//GEN-LAST:event_dungeonizeActionPerformed

    private void viewMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMapActionPerformed
        String folderPath = folder.getText();
        String name = fileName.getText();
        File dir = new File(folderPath);
        if(!dir.exists()){
            dir.mkdir();
        }
        // export PNG
        GraphImageBuilder gib = new GraphImageBuilder(dir+"\\img_"+name+".png");
        BufferedImage bImg = gib.buildImage(graph);
        ImageIcon icon = new ImageIcon(bImg);
        //int[] bounds = (new GraphStreamUtil()).getGraphBoundsWithBorder(graph);
        //ImagePanel imgPanel = new ImagePanel(bImg, bounds);
        JOptionPane.showMessageDialog(graphPanel, "", dir+"\\img_"+name+".png", 0, icon);
    }//GEN-LAST:event_viewMapActionPerformed

    /*class ImagePanel extends JPanel {

        private BufferedImage image;
        private int[] bounds;
        
        public ImagePanel(BufferedImage img, int[] bounds) {
            this.image = img;
            this.bounds = bounds;
            this.setBounds(0, 0, bounds[0], bounds[1]);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(image, 0, 0, bounds[0], bounds[1], this); // see javadoc for more info on the parameters            
        }

    }*/
    
    protected int findValidID(){
        int id = graph.getNodeCount();
        if(graph.getNode(String.format("%s", id)) == null)
            return id;
        else
            for(int i = 0; i < graph.getNodeCount()*100; i++)
                if(graph.getNode(String.format("%s", i)) == null)
                    return i;
        return id;
    }
    
    protected void refreshGraphView(){
        Viewer viewer = new Viewer(graph, Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
        ViewPanel viewPanel = viewer.addDefaultView(false);
        
        graphPanel.removeAll();
        graphPanel.add(viewPanel);
        graphPanel.validate();
        graphPanel.updateUI();
        graphPanel.repaint();
        
        gaThread.mapNodeID2Index(graph);
        gaThread.setupNodeCombo(graph);
        gaThread.setupEdgeCombo(graph);
    }
    
    private int[] parseAngles(String str){
        if(str.length() > 0){
            String[] array = str.split(";");

            int[] angles = new int[array.length];
            for(int i = 0; i < array.length; i++){
                angles[i] = Integer.parseInt(array[i].trim());
            }
            return angles;
        }
        else{
            int[] angles = {};
            return angles;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            BasicLookAndFeel darcula = new DarculaLaf();
            UIManager.setLookAndFeel(darcula);
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                //System.out.println(info.getName());
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);*/
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEdge;
    private javax.swing.JButton addNode;
    private javax.swing.JButton applyConfig;
    private javax.swing.JTextField asp;
    private javax.swing.JTextField borderSize;
    private javax.swing.JTextField configFile;
    private javax.swing.JTextField crossoverRate;
    private javax.swing.JTextField deltaFactor;
    private javax.swing.JTextField din;
    private javax.swing.JButton dungeonize;
    private javax.swing.JTextField edgeAngle;
    private javax.swing.JButton edgeApply;
    private javax.swing.JComboBox<String> edgeBox;
    private javax.swing.JTextField edgeDistance;
    private javax.swing.JTextField edgeFrom;
    private javax.swing.JTextField edgeIntersectionPenalty;
    private javax.swing.JTextField edgeSize;
    private javax.swing.JTextField edgeSymbol;
    private javax.swing.JTextField edgeTo;
    private javax.swing.JTextField eip;
    private javax.swing.JButton evaluate;
    private javax.swing.JTextField fileName;
    private javax.swing.JTextField fitness;
    private javax.swing.JTextField folder;
    private javax.swing.JTextField gen;
    private javax.swing.JTextField generation;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JTextField idealNonlinearity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField linksPerStep;
    private javax.swing.JButton loadConfig;
    private javax.swing.JButton loadJsonMap;
    private javax.swing.JCheckBox loopRefinement;
    private javax.swing.JTextField maxEdgeDist;
    private javax.swing.JTextField maxNodeCount;
    private javax.swing.JTextField maxNodeSize;
    private javax.swing.JCheckBox maximizeNodeCount;
    private javax.swing.JTextField medp;
    private javax.swing.JTextField minEdgeDist;
    private javax.swing.JTextField minEdgeDistPenalty;
    private javax.swing.JTextField minNodeCount;
    private javax.swing.JTextField minNodeSize;
    private javax.swing.JTextField mutationRate;
    private javax.swing.JTextField nip;
    private javax.swing.JButton nodeApply;
    private javax.swing.JComboBox<String> nodeBox;
    private javax.swing.JTextField nodeCountPenalty;
    private javax.swing.JTextField nodeDegree;
    private javax.swing.JTextField nodeDepth;
    private javax.swing.JTextField nodeHeight;
    private javax.swing.JTextField nodeIntensity;
    private javax.swing.JTextField nodeInterserctionPenalty;
    private javax.swing.JTextField nodeSymbol;
    private javax.swing.JTextField nodeWidth;
    private javax.swing.JTextField nodeX;
    private javax.swing.JTextField nodeY;
    private javax.swing.JTextField nodeZ;
    private javax.swing.JTextField popASPMean;
    private javax.swing.JTextField popASPMedian;
    private javax.swing.JTextField popASPMin;
    private javax.swing.JTextField popDINMean;
    private javax.swing.JTextField popDINMedian;
    private javax.swing.JTextField popDINMin;
    private javax.swing.JTextField popEIPMean;
    private javax.swing.JTextField popEIPMedian;
    private javax.swing.JTextField popEIPMin;
    private javax.swing.JTextField popFitnessMean;
    private javax.swing.JTextField popFitnessMedian;
    private javax.swing.JTextField popFitnessMin;
    private javax.swing.JTextField popMEDPMean;
    private javax.swing.JTextField popMEDPMedian;
    private javax.swing.JTextField popMEDPMin;
    private javax.swing.JTextField popNIPMean;
    private javax.swing.JTextField popNIPMedian;
    private javax.swing.JTextField popNIPMin;
    private javax.swing.JTextField popSPMean;
    private javax.swing.JTextField popSPMedian;
    private javax.swing.JTextField popSPMin;
    private javax.swing.JTextField popSizeMean;
    private javax.swing.JTextField popSizeMedian;
    private javax.swing.JTextField popSizeMin;
    private javax.swing.JTextField popUASMean;
    private javax.swing.JTextField popUASMedian;
    private javax.swing.JTextField popUASMin;
    private javax.swing.JTextField population;
    private javax.swing.JTextField preferedAngles;
    private javax.swing.JProgressBar progress;
    private javax.swing.JButton refine;
    private javax.swing.JTextField refinementRate;
    private javax.swing.JButton removeEdge;
    private javax.swing.JButton removeNode;
    private javax.swing.JButton resetConfig;
    private javax.swing.JButton runGeneticAlgorithm;
    private javax.swing.JButton saveConfig;
    private javax.swing.JButton saveJasonMap;
    private javax.swing.JTextField size;
    private javax.swing.JTextField sp;
    private javax.swing.JButton stop;
    private javax.swing.JTextField uas;
    private javax.swing.JCheckBox useASP;
    private javax.swing.JCheckBox useAngles;
    private javax.swing.JCheckBox useINL;
    private javax.swing.JButton viewMap;
    private javax.swing.JTextField xLeap;
    private javax.swing.JTextField yLeap;
    private javax.swing.JTextField zLeap;
    // End of variables declaration//GEN-END:variables
}
